{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Rodney/Documents/GitHub/movie-viewer/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=10f128d3\";\n/*\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SERACH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n*/\n\nconst App = () => {\n  _s();\n\n  //const [state, dispatch] = useReducer(reducer, initialState);\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  useEffect(() => {\n    fetch(MOVIE_API_URL).then(response => response.json()).then(jsonResponse => {\n      setMovies(jsonResponse.Search);\n      setLoading(false);\n      /*\n      dispatch({\n        type: \"SEARCH_MOVIES_SUCCESS\",\n        payload: jsonResponse.Search\n      });\n      */\n    });\n  }, []);\n  /*\n  dispatch({\n    type: \"SEARCH_MOVIES_REQUEST\"\n  });\n  */\n\n  const search = searchValue => {\n    setLoading(true);\n    setErrorMessage(null);\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`).then(response => response.json()).then(jsonResponse => {\n      if (jsonResponse.Response === \"True\") {\n        setMovies(jsonResponse.Search);\n        setLoading(false);\n        /*\n        dispatch({\n          type: \"SEARCH_MOVIES_SUCCESS\",\n          payload: jsonResponse.Search\n        });\n        */\n      } else {\n        setErrorMessage(jsonResponse.Error);\n        setLoading(false);\n        /*\n        dispatch({\n          type: \"SEARCH_MOVIES_FAILURE\",\n          error: jsonResponse.Error\n        });\n        */\n      }\n    });\n  }; //const { movies, errorMessage, loading } = state;\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      text: \"movie-viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      search: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"App-intro\",\n      children: \"some of my favourite movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies\",\n      children: loading && !errorMessage ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"loading... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this) : errorMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"errorMessage\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this) : movies.map((movie, index) => /*#__PURE__*/_jsxDEV(Movie, {\n        movie: movie\n      }, `${index}-${movie.Title}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"hSD2JYgtHOfqws9SBamg3OT7G98=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Rodney/Documents/GitHub/movie-viewer/src/components/App.js"],"names":["React","useState","useEffect","Header","Movie","Search","MOVIE_API_URL","App","loading","setLoading","movies","setMovies","errorMessage","setErrorMessage","fetch","then","response","json","jsonResponse","search","searchValue","Response","Error","map","movie","index","Title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=10f128d3\";\n/*\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SERACH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n*/\nconst App = () => {\n  //const [state, dispatch] = useReducer(reducer, initialState);\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] =useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        setMovies(jsonResponse.Search);\n        setLoading(false);\n        /*\n        dispatch({\n          type: \"SEARCH_MOVIES_SUCCESS\",\n          payload: jsonResponse.Search\n        });\n        */\n      });\n  }, []);\n\n    /*\n    dispatch({\n      type: \"SEARCH_MOVIES_REQUEST\"\n    });\n    */\n\n  const search = searchValue => {\n    setLoading(true);\n    setErrorMessage(null);\n    \n    \n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          setMovies(jsonResponse.Search);\n          setLoading(false);\n          \n          /*\n          dispatch({\n            type: \"SEARCH_MOVIES_SUCCESS\",\n            payload: jsonResponse.Search\n          });\n          */\n        } else {\n          setErrorMessage(jsonResponse.Error);\n          setLoading(false);\n          /*\n          dispatch({\n            type: \"SEARCH_MOVIES_FAILURE\",\n            error: jsonResponse.Error\n          });\n          */\n        }\n      });\n  };\n\n  //const { movies, errorMessage, loading } = state;\n\n  return (\n    <div className=\"App\">\n      <Header text=\"movie-viewer\" />\n      <Search search={search} />\n      <p className=\"App-intro\">some of my favourite movies</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <span>loading... </span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n              movies.map((movie, index) => (\n                <Movie key={`${index}-${movie.Title}`} movie={movie} />\n              ))\n            )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}